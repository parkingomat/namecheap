{
"version":3,
"file":"compile/namecheap.js",
"lineCount":463,
"mappings":"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",
"sources":["node_modules/https/index.js","node_modules/http/index.js","node_modules/util/index.js","node_modules/erotic/src/lib.js","node_modules/os/index.js","node_modules/@artdeco/clean-stack/src/index.js","node_modules/erotic/src/callback.js","node_modules/erotic/src/index.js","node_modules/url/index.js","node_modules/stream/index.js","node_modules/catchment/src/lib/index.js","node_modules/catchment/src/index.js","node_modules/zlib/index.js","node_modules/@rqt/aqt/src/lib/make-request.js","node_modules/@rqt/aqt/src/lib/index.js","node_modules/@rqt/aqt/src/index.js","node_modules/querystring/index.js","node_modules/mismatch/src/index.js","node_modules/rexml/src/lib/res-simple.js","node_modules/rexml/src/index.js","node_modules/rexml/src/lib/index.js","src/lib/index.js","src/lib/query.js","src/api/domains/get-list.js","src/api/domains/get-info.js","src/api/domains/check.js","src/api/domains/create.js","src/api/domains/dns/get-hosts.js","src/api/domains/dns/set-hosts.js","src/api/address/get-list.js","src/api/address/get-info.js","src/api/users/get-pricing.js","src/index.js","src/depack.js"],
"sourcesContent":["export default https\nexport const {\n  Agent,\n  Server,\n  createServer,\n  get,\n  globalAgent,\n  request,\n} = https","export default http\nexport const {\n  Agent,\n  ClientRequest,\n  IncomingMessage,\n  METHODS,\n  OutgoingMessage,\n  STATUS_CODES,\n  Server,\n  ServerResponse,\n  createServer,\n  get,\n  globalAgent,\n  maxHeaderSize,\n  request,\n} = http","export default util\nexport const {\n  TextDecoder,\n  TextEncoder,\n  callbackify,\n  debug,\n  debuglog,\n  deprecate,\n  error,\n  format,\n  getSystemErrorName,\n  inherits,\n  inspect,\n  isArray,\n  isBoolean,\n  isBuffer,\n  isDate,\n  isError,\n  isFunction,\n  isNull,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isPrimitive,\n  isRegExp,\n  isString,\n  isSymbol,\n  isUndefined,\n  log,\n  print,\n  promisify,\n  puts,\n} = util","const getLastItem = (array) => {\n  const item = array[array.length - 1]\n  return item\n}\nconst getItemsFrom = (array, from) => array.slice(from)\n\n/**\n * Get a segment of the stack string, defaults are from = 0 and oneLine = false.\n * @param {string} stack the stack string\n * @param {number} [from=0] index from which to slice from\n * @param {boolean} [oneLine=false] Whether just first line must be returned\n * @returns {string} A stack segment starting from the specified line.\n */\nexport const getStackSegment = (stack, from = 0, oneLine = false) => {\n  if (from === 0 && !oneLine) {\n    return stack\n  }\n  const splitStack = stack\n    .split('\\n', oneLine ? from + 1 : undefined)\n  if (oneLine) {\n    const line = getLastItem(splitStack)\n    return line\n  } else {\n    const items = getItemsFrom(splitStack, from)\n    return items.join('\\n')\n  }\n}\n\n/**\n * Get the stack trace part of when the erotic function was called. Disregards\n * first two lines.\n * @param {string} stack error's stack\n * @param {boolean} [transparent] trim the top line as well\n * @returns {string} A part of stack\n */\nexport const getEntryStack = (stack, transparent = false) => {\n  const stackSegment = getStackSegment(stack, 2 + (transparent ? 1 : 0))\n  return stackSegment\n}\n\n/**\n * Get stack line of where the callback was called.\n * @param {string} stack Stack string.\n * @returns {string} Stack line.\n */\nexport const getCalleeStackLine = (stack) => {\n  const calleeStackLine = getStackSegment(stack, 2, true)\n  return calleeStackLine\n}\n\nexport const getStackHeading = message => `Error: ${message}`\n\n/**\n * Extract caller from the function's `arguments`.\n * @param {Object} args arguments\n * @returns {!Function} The caller function from `arguments.callee.caller`.\n */\nexport const getCallerFromArguments = (args) => {\n  const { callee: { caller } } = args\n  return caller\n}","export default os\nexport const {\n  EOL,\n  arch,\n  constants,\n  cpus,\n  endianness,\n  freemem,\n  homedir,\n  hostname,\n  loadavg,\n  networkInterfaces,\n  platform,\n  release,\n  tmpdir,\n  totalmem,\n  type,\n  uptime,\n  userInfo,\n} = os","import { homedir } from 'os'\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:IGNORED_MODULES)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/\n\nconst homeDir = homedir()\n\n/**\n * Remove internal Node.JS lines from the error stack traces.\n * @param {string} stack The error stack to update.\n * @param {!_cleanStack.Config} [options] Options for the program.\n * @param {boolean} [options.pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @param {!Array<string>} [options.ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\nconst cleanStack = (stack, options) => {\n  const {\n    pretty = false, ignoredModules = ['pirates'],\n  } = options || {}\n  const j = ignoredModules.join('|')\n  const re = new RegExp(pathRegex.source.replace('IGNORED_MODULES', j))\n\n  return stack.replace(/\\\\/g, '/')\n    .split('\\n')\n    .filter(x => {\n      const pathMatches = x.match(extractPathRegex)\n      if (pathMatches === null || !pathMatches[1]) {\n        return true\n      }\n\n      const match = pathMatches[1]\n\n      // Electron\n      if (match.includes('.app/Contents/Resources/electron.asar') ||\n        match.includes('.app/Contents/Resources/default_app.asar')) {\n        return false\n      }\n\n      return !re.test(match)\n    })\n    .filter(x => x.trim())\n    .map(x => {\n      if (pretty) {\n        return x.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')))\n      }\n\n      return x\n    })\n    .join('\\n')\n}\n\nexport default cleanStack\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_cleanStack.Config} Config Options for the program.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _cleanStack.Config Options for the program.\n * @prop {boolean} [pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @prop {!Array<string>} [ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\n","import cleanStack from '@artdeco/clean-stack'\nimport {\n  getCallerFromArguments, getCalleeStackLine, getStackHeading,\n} from './lib'\n\n/**\n * Create a callback.\n * @param {!Function} entryCaller The function which was called at entry.\n * @param {string} entryStack The first line of the error stack to be returned\n * @param {boolean} [shadow=false] Print only entry stack.\n */\nexport function makeCallback(entryCaller, entryStack, shadow = false) {\n  /**\n   * This callback should be called when an asynchronous error occurred.\n   * @param {(string|Error)} messageOrError A message string or an _Error_ object at the point of actual error.\n   * @returns {Error} An error with the updated stack which includes the callee.\n   */\n  function cb(messageOrError) {\n    const caller = getCallerFromArguments(arguments)\n    const { stack: errorStack } = new Error()\n    const calleeStackLine = getCalleeStackLine(errorStack)\n    const isError = messageOrError instanceof Error\n    const message = isError ? messageOrError.message : messageOrError\n\n    const stackHeading = getStackHeading(message)\n    const entryHasCallee = caller !== null && entryCaller === caller\n    const stackMessage = [\n      stackHeading,\n      ...(entryHasCallee || shadow ? [entryStack] : [\n        calleeStackLine,\n        entryStack,\n      ]),\n    ].join('\\n')\n\n    const stack = cleanStack(stackMessage)\n    const properties = { message, stack }\n    const e = isError ? messageOrError : new Error()\n\n    return /** @type {Error} */ (Object.assign(/** @type {!Object} */ (e), properties))\n  }\n\n  return cb\n}","import {\n  getEntryStack, getCallerFromArguments,\n} from './lib'\nimport { makeCallback } from './callback'\n\n/**\n * Returns a function to create an error with a stack trace starting at the line in code when the call was made by the callee.\n * @param {boolean} [transparent] Pretend as if the call to the function lead to the error, without exposing any of the internal stack.\n */\nexport default function erotic(transparent) {\n  const { stack } = new Error()\n  const caller = getCallerFromArguments(arguments)\n  const entryStack = getEntryStack(stack, transparent)\n\n  return makeCallback(caller, entryStack, transparent)\n}","export default url\nexport const {\n  URL,\n  URLSearchParams,\n  Url,\n  domainToASCII,\n  domainToUnicode,\n  format,\n  parse,\n  resolve,\n} = url","export default stream\nexport const {\n  Duplex,\n  PassThrough,\n  Readable,\n  Stream,\n  Transform,\n  Writable,\n} = stream","/**\n * Listens for the `error` event once so that when an error in _streamB_ is emitted, is is also emitted in the _streamA_.\n * @param {stream.Stream} streamA The stream that will emit an error once it's caught in the `streamB`.\n * @param {stream.Stream} streamB The stream from which the error originates.\n * @returns The stream the error is listened on, i.e., transparent to calling the `.once` method on that stream.\n */\nexport const pipeError = (streamA, streamB) => {\n  streamB\n    .once('error', e => {\n      streamA.emit('error', e)\n    })\n  return streamB\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Stream} stream.Stream\n */","import { Writable } from 'stream'\nimport erotic from 'erotic'\nimport cleanStack from '@artdeco/clean-stack'\nimport { pipeError } from './lib'\n\nfunction joinBufferData(array) {\n  return array.join('')\n}\n\n/**\n * A writable stream which collects incoming data into memory, and provides a promise to way for the stream to finish. The promise is resolved with joined chunks.\n */\nexport default class Catchment extends Writable {\n  /**\n   * Create a new catchment to pipe a readable stream into and collect all emitted data.\n   * @param {!_catchment.Options} [options] Options to pass to the `Writable` super constructor, and others shown below.\n   * @param {!stream.Readable} [options.rs] A readable stream to automatically pipe into the catchment. If an error occurs during reading of this stream, the catchment promise will be rejected with it.\n   * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n   * @example\n   *\n   * import { createReadStream } from 'fs'\n   * import Catchment from 'catchment'\n   *\n   * const rs = createReadStream('file.txt')\n   * const { promise } = new Catchment({ rs })\n   * const res = await promise\n   */\n  constructor(options) {\n    const {\n      binary = false, rs = null, ...opts\n    } = options || {}\n    /** @suppress {missingProperties} */\n    const { er = erotic(true), proxyError } = options || {}\n    const wrap = (_, e) => er(e)\n    super(/** @type {!stream.WritableOptions} */ (opts))\n    this._caughtData = []\n    this._promise = new Promise((r, j) => {\n      this.on('finish', () => {\n        let d\n        if (binary) {\n          d = Buffer.concat(this._caughtData)\n        } else {\n          d = joinBufferData(this._caughtData)\n        }\n        r(d)\n        this._caughtData = []\n      })\n      this.once('error', (e) => {\n        if (e.stack.indexOf('\\n') == -1) {\n          wrap`${e}`\n          j(e)\n        } else {\n          const stack = cleanStack(e.stack)\n          e.stack = stack\n          if (proxyError) wrap`${e}`\n          j(e)\n        }\n      })\n      if (rs) {\n        pipeError(this, rs).pipe(this)\n      }\n    })\n  }\n  _write(chunk, encoding, callback) {\n    this._caughtData.push(chunk)\n    callback()\n  }\n  /**\n   * A promise which will resolve will all data when the stream finishes.\n   * @type {Promise<string|Buffer>}\n   */\n  get promise() {\n    return this._promise\n  }\n}\n\n/**\n * Collect data into a catchment, and return results when the stream finishes.\n * @param {stream.Readable} readable A readable stream to collect all data from. If an error occurs during reading of this stream, the promise will be rejected with it.\n * @param {_catchment.CollectOptions} options Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n * @param {boolean} [options.proxyError=false] Sets whether an error emitted by the stream with have its stack start at the line where the `collect` was called rather than inside of the stream. In other words, hides the implementation of the stream. Default `false`.\n * @example\n *\n * import { collect } from 'catchment'\n * import { createReadStream } from 'fs'\n *\n * const rs = createReadStream(path)\n * await collect(rs, { proxyError: true })\n */\nexport const collect = async (readable, options = {}) => {\n  const { promise } = new Catchment({\n    rs: readable,\n    ...options,\n    er: erotic(true),\n  })\n  const res = await promise\n  return res\n}\n\n/* typal types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_catchment.Options} Options Options to pass to the `Writable` super constructor, and others shown below.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _catchment.Options Options to pass to the `Writable` super constructor, and others shown below.\n * @prop {!stream.Readable} [rs] A readable stream to automatically pipe into the catchment. If an error occurs during reading of this stream, the catchment promise will be rejected with it.\n * @prop {boolean} [binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Readable} stream.Readable\n */\n\n/* typal types/collect.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_catchment.CollectOptions} CollectOptions Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _catchment.CollectOptions Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n * @prop {boolean} [binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n * @prop {boolean} [proxyError=false] Sets whether an error emitted by the stream with have its stack start at the line where the `collect` was called rather than inside of the stream. In other words, hides the implementation of the stream. Default `false`.\n */\n","export default zlib\nexport const {\n  Deflate,\n  DeflateRaw,\n  Gunzip,\n  Gzip,\n  Inflate,\n  InflateRaw,\n  Unzip,\n  Z_BEST_COMPRESSION,\n  Z_BEST_SPEED,\n  Z_BLOCK,\n  Z_BUF_ERROR,\n  Z_DATA_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_ERRNO,\n  Z_FILTERED,\n  Z_FINISH,\n  Z_FIXED,\n  Z_FULL_FLUSH,\n  Z_HUFFMAN_ONLY,\n  Z_MEM_ERROR,\n  Z_NEED_DICT,\n  Z_NO_COMPRESSION,\n  Z_NO_FLUSH,\n  Z_OK,\n  Z_PARTIAL_FLUSH,\n  Z_RLE,\n  Z_STREAM_END,\n  Z_STREAM_ERROR,\n  Z_SYNC_FLUSH,\n  Z_VERSION_ERROR,\n  constants,\n  createDeflate,\n  createDeflateRaw,\n  createGunzip,\n  createGzip,\n  createInflate,\n  createInflateRaw,\n  createUnzip,\n  deflate,\n  deflateRaw,\n  deflateRawSync,\n  deflateSync,\n  gunzip,\n  gunzipSync,\n  gzip,\n  gzipSync,\n  inflate,\n  inflateRaw,\n  inflateRawSync,\n  inflateSync,\n  unzip,\n  unzipSync,\n} = zlib","import erotic from 'erotic'\nimport { collect } from 'catchment'\nimport { createGunzip } from 'zlib'\nimport { request as Request } from 'http' // eslint-disable-line\n\n/**\n * @param {!http.IncomingMessage} res\n */\nexport const isMessageGzip = (res) => {\n  /**\n   * @suppress {checkTypes}\n   */\n  const { 'content-encoding': contentEncoding } = res.headers\n  return contentEncoding == 'gzip'\n}\n\n/**\n * @param {typeof Request} request The actual http or https request function.\n * @param {!http.RequestOptions} requestOptions\n * @param {!Object} [config] Config object.\n * @param {boolean} [config.justHeaders] only return headers as soon as available. false\n * @param {boolean} [config.binary] return binary\n * @param {boolean} [config.er] erotic callback\n */\nconst makeRequest = (request, requestOptions, config = {}) => {\n  const { justHeaders, binary, er = erotic(true) } = config\n  /** @type {!http.ClientRequest} */\n  let req\n\n  /** @type {!http.IncomingHttpHeaders} */\n  let headers\n  /** @type {{statusMessage: string, statusCode: number}} */\n  let m\n  /** @type {string|!Buffer} */\n  let body\n  let rawLength = 0\n  let byteLength = 0\n\n  const promise = new Promise((r, j) => {\n    req = request(requestOptions, async (res) => {\n      ({ headers } = res)\n      const { statusMessage, statusCode } = res\n      m = { statusMessage, statusCode }\n      if (justHeaders) {\n        res.destroy()\n        r()\n        return\n      }\n      const isGzip = isMessageGzip(res)\n\n      res.on('data', data => rawLength += data.byteLength )\n\n      const rs = isGzip\n        ? res.pipe(createGunzip())\n        : res\n\n      body = await collect(rs, { binary })\n      byteLength = body.length\n\n      r()\n    })\n      .on('error', (error) => {\n        const err = er(error)\n        j(err)\n      })\n      .on('timeout', () => {\n        req.abort()\n      })\n  }).then(() => {\n    const r = {\n      body,\n      headers,\n      ...m,\n      rawLength,\n      byteLength,\n      parsedBody: null,\n    }\n    return r\n  })\n  return { req, promise }\n}\n\nexport default makeRequest\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').IncomingMessage} http.IncomingMessage\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').ClientRequest} http.ClientRequest\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').IncomingHttpHeaders} http.IncomingHttpHeaders\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').RequestOptions} http.RequestOptions\n */","import erotic from 'erotic'\nimport makeRequest from './make-request'\n\nexport const getFormData = (form = {}) => {\n  const urlEncodedDataPairs = Object.keys(form).reduce((acc, key) => {\n    const v = form[key]\n    const p = `${encodeURIComponent(key)}=${encodeURIComponent(v)}`\n    return [...acc, p]\n  }, [])\n\n  const d = urlEncodedDataPairs.join('&').replace(/%20/g, '+')\n  return d\n}\n\nexport const getData = (type, data) => {\n  switch (type) {\n  case 'json':\n    data = JSON.stringify(data)\n    type = 'application/json'\n    break\n  case 'form':\n    data = getFormData(data)\n    type = 'application/x-www-form-urlencoded'\n    break\n  }\n  return {\n    data,\n    contentType: type,\n  }\n}\n\nexport const exec = async (request, requestOptions,\n  { data, justHeaders, binary, er = erotic(true) },\n) => {\n  const { req, promise } = makeRequest(request, requestOptions, {\n    justHeaders,\n    binary,\n    er,\n  })\n  req.end(data)\n  const res = await promise\n\n  const isJson = isHeadersJson(res.headers)\n\n  if (isJson && res.body) {\n    try {\n      res.parsedBody = JSON.parse(res.body)\n    } catch (e) {\n      const err = er(e)\n      err.response = res.body\n      throw err\n    }\n  }\n\n  return res\n}\n\n/**\n * Check if the returned content-type starts with application/json.\n * @param {!http.IncomingHttpHeaders} headers\n */\nconst isHeadersJson = (headers) => {\n  /**\n   * @suppress {checkTypes}\n   */\n  const { 'content-type': contentType = '' } = headers\n  return contentType.startsWith('application/json')\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').IncomingHttpHeaders} http.IncomingHttpHeaders\n */","import { request as https } from 'https'\nimport { request as http } from 'http'\nimport { debuglog } from 'util'\nimport erotic from 'erotic'\nimport { parse } from 'url'\nimport { getData, exec } from './lib'\n\nlet ua\ntry {\n  // require in index won't lead to --process_common_js_modules\n  const { 'version': version, 'name': name } = require('../package.json')\n  ua = name == '@rqt/aqt' ? `@rqt/aqt/${version}` : `@rqt/aqt via ${name}/${version}`\n} catch (err) {\n  ua = '@aqt/rqt'\n}\n\nconst LOG = debuglog('aqt')\n\n/**\n * Request a web page and return information including `headers`, `statusCode`, `statusMessage` along with the `body` (which is also parsed if JSON received).\n * @param {string} address The URL such as http://example.com/api.\n * @param {_rqt.AqtOptions} [options] Configuration for requests.\n */\nconst aqt = async (address, options = {}) => {\n  const {\n    data: d,\n    type = 'json',\n    headers: outgoingHeaders = {\n      'User-Agent': `Mozilla/5.0 (Node.JS) ${ua}`,\n    },\n    compress = true,\n    binary = false,\n    justHeaders = false,\n    method,\n    timeout,\n  } = options\n  const er = erotic(true)\n\n  const { hostname, protocol, port, path } = parse(address)\n  const isHttps = protocol === 'https:'\n  const request = isHttps ? https : http\n\n  const opts = {\n    hostname,\n    port,\n    path,\n    headers: {\n      ...outgoingHeaders,\n    },\n    timeout,\n    method,\n  }\n\n  let data\n  if (d) {\n    const _d = getData(type, d)\n      ; ({ data } = _d)\n    const { contentType } = _d\n\n    opts.method = method || 'POST'\n    if (!('Content-Type' in opts.headers)) {\n      opts.headers['Content-Type'] = contentType\n    }\n    if (!('Content-Length' in opts.headers)) {\n      opts.headers['Content-Length'] = Buffer.byteLength(data)\n    }\n  }\n  if (compress && !('Accept-Encoding' in opts.headers)) {\n    opts.headers['Accept-Encoding'] = 'gzip, deflate'\n  }\n\n  const {\n    body, headers, byteLength, statusCode, statusMessage, rawLength,\n    parsedBody,\n  } = await exec(request, opts, {\n    data,\n    justHeaders,\n    binary,\n    er,\n  })\n\n  LOG('%s %s B%s', address, byteLength, `${byteLength != rawLength ? ` (raw ${rawLength} B)` : ''}`)\n\n  /** @type {!_rqt.AqtReturn} */\n  const res = {\n    body: parsedBody ? parsedBody : body,\n    headers,\n    statusCode,\n    statusMessage,\n  }\n  return res\n}\n\nexport default aqt\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types').AqtOptions} _rqt.AqtOptions\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types').AqtReturn} _rqt.AqtReturn\n */","export default querystring\nexport const {\n  decode,\n  encode,\n  escape,\n  parse,\n  stringify,\n  unescape,\n} = querystring","/**\n * Returns an array of captured groups of a regular expression as objects. Does not modify the `lastIndex` property of the regex.\n * @param {RegExp} re The regular expression used for matching.\n * @param {string} string String to find matches in.\n * @param {Array<string>} keys Keys to use to create an captured group object.\n * @param {boolean} addPositions Whether to include positions in the return.\n * @example\n *\n```js\nconst re = /(test) inside of a (string)(\\d)?/ig\nconst s = 'Test inside of a STRING1. TEST inside of a string.'\nconst keys = ['test', 'string', 'number']\nconst res = mismatch(re, s, keys)\n\n// result:\n[\n {\n   test: 'Test',\n   string: 'STRING',\n   number: '1',\n },\n {\n   test: 'TEST',\n   string: 'string',\n },\n]\n```\n */\nexport default function mismatch(re, string, keys, addPositions = false) {\n  /** @type {!Array<!Object<string, string>>} */\n  const m = []\n  string.replace(re, (match, ...args) => {\n    // remove position and input\n    const position = args[args.length - 2]\n    const start = addPositions ? { position } : {}\n    const p = args.slice(0, args.length - 2)\n    const o = p.reduce((acc, capturedGroup, i) => {\n      const key = keys[i]\n      if (!(key && capturedGroup !== undefined)) return acc\n      acc[key] = capturedGroup\n      return acc\n    }, start)\n    m.push(o)\n  })\n  return m\n}","const nameRe = /([^\\s>=/]+)/\nconst valRe = /(?:\"([\\s\\S]*?)\"|'([\\s\\S]*?)')/\n\nexport const attributeRe = new RegExp(`${nameRe.source}(?:\\\\s*=\\\\s*${valRe.source})?`, 'g')\n\n/**\n * This regex will match all attributes as a string inside of element, e.g., matching `<el attr=\"abc\" bool/>` will result in `attr=\"abc\" bool`.\n */\nexport const attributesRe = new RegExp(`\\\\s*((?:${attributeRe.source}\\\\s*)*)`)\n","import mismatch from 'mismatch'\nimport { extractProps as extractPropsSpec, getPropValue } from './lib'\nimport { attributesRe } from './lib/res'\nimport { attributesRe as simple, attributeRe as simpleAttribute } from './lib/res-simple'\n\nconst execRes = (re, s) => {\n  const res = re.exec(s)\n  if (!res) return res\n  const [, ...args] = res\n  return args\n}\n\n/**\n * Extract member elements from an XML string. Numbers and booleans will be parsed into their JS types.\n * @param {string} tag Which tag to extract, e.g., `div`.\n * @param {string} string The XML string.\n * @example\n *\n * const xml = `\n<html>\n  <div id=\"1\" class=\"test\" contenteditable>\n    Hello World\n  </div>\n</html>\n`\n * const [{ content, props }] = extractTag('div', xml)\n * // content: Hello World\n * // props: { id: 1, class: 'test', contenteditable: true }\n */\nconst extractTags = (tag, string) => {\n  const end1 = /\\s*\\/>/\n  const end2 = new RegExp(`>([\\\\s\\\\S]+?)?</${tag}>`)\n  const re = new RegExp(`<${tag}${simple.source}?(?:${end1.source}|${end2.source})`, 'g')\n\n  const matches = mismatch(re, string, ['a', 'v', 'v1', 'v2', 'c'])\n  const res = matches.map(({ 'a': attributes = '', 'c': content = '' }) => {\n    const attrs = attributes.replace(/\\/$/, '').trim()\n    const props = extractProps(attrs)\n    return { content, props }\n  })\n  return res\n}\n\n/**\n * Extracts the properties from the attributes part of the tag and returns them as an object. It will parse values if not specified otherwise.\n * @param {string} string The attribute part of the tag.\n * @param {boolean} parseValue Whether to transform the value into its value.\n */\nexport const extractProps = (string, parseValue = true) => {\n  const m = mismatch(simpleAttribute, string, ['key', 'val', 'def', 'f'])\n  const props = m\n    .reduce((acc, { 'key': key, 'val': val }) => {\n      if (val === undefined) {\n        acc[key] = true\n        return acc\n      }\n      acc[key] = parseValue ? getPropValue(val) : val\n      return acc\n    }, {})\n  return props\n}\n\n/**\n * Extract member elements from an XML string using the complex regular expression to match attributes that confirms to the XML spec. Numbers and booleans will be parsed into their JS types.\n * @param {string} tag Which tag to extract, e.g., `div`.\n * @param {string} string The XML string.\n * @example\n *\n * const xml = `\n<html>\n  <div id=\"1\" class=\"test\" contenteditable>\n    Hello World\n  </div>\n</html>\n`\n * const [{ content, props }] = extractTag('div', xml)\n * // content: Hello World\n * // props: { id: 1, class: 'test', contenteditable: true }\n */\nexport const extractTagsSpec = (tag, string) => {\n  const end1 = /\\s*\\/>/\n  const end2 = new RegExp(`>([\\\\s\\\\S]+?)?</${tag}>`)\n  const re = new RegExp(`<${tag}${attributesRe.source}?(?:${end1.source}|${end2.source})`, 'gu')\n  const r = []\n\n  let t\n  while ((t = execRes(re, string))) {\n    if (!t.length) continue\n    const [_p = '', _c = ''] = t\n    const p = _p.replace(/\\/$/, '').trim()\n    const props = extractProps(p)\n    const item = {\n      props,\n      content: _c,\n    }\n    r.push(item)\n  }\n  return r\n}\n\nexport default extractTags\nexport { extractPropsSpec }","import { attributeRe } from './res'\n\nexport const getPropValue = (val) => {\n  if (val == 'true') return true\n  if (val == 'false') return false\n  if (/^\\d+$/.test(val)) {\n    return parseInt(val, 10)\n  }\n  return val\n}\n\n/**\n * Parse the arguments part of an XML element\n * @param {string} string String to extract attributes from.\n * @param {boolean} parseValue Parse `true` and `false` values into a boolean, and numbers into integers. Default `true`.\n */\nexport const extractProps = (string, parseValue = true) => {\n  const o = {}\n  const re = new RegExp(`\\\\s+${attributeRe.source}`, 'gu')\n  ;` ${string}`.replace(re, (match, name,  doubleQuoteVal, singleQuoteVal) => {\n    const value = singleQuoteVal || doubleQuoteVal\n    const v = value === undefined ? true : value\n    const val = parseValue ? getPropValue(v) : v\n    o[name] = val\n  })\n  return o\n}\n","export const filterEmpty = (obj) => {\n  return Object.keys(obj).reduce((acc, k) => {\n    const val = obj[k]\n    if (val === undefined) return acc\n    acc[k] = val\n    return acc\n  }, {})\n}\n\nexport const validateDomains = (arr) => arr.reduce((acc, current) => {\n  return acc && typeof current == 'string'\n}, true)","import aqt from '@rqt/aqt'\nimport { stringify } from 'querystring'\nimport extractTags from 'rexml'\nimport { filterEmpty } from './'\n\n/** @param {string} s */\nconst isXml = s => s.startsWith('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n\nconst UA = [\n  'Mozilla/5.0',\n  '(Node.js; @rqt/namecheap v2.1.2)',\n  'https://github.com/rqt/namecheap',\n].join(' ')\n\nexport default async function query({\n  ApiUser,\n  ApiKey,\n  ClientIp,\n  host,\n}, Command, Options = {}, method = 'GET') {\n  if (!Command) throw new Error('Command must be passed.')\n  const data = filterEmpty(Options)\n  const authData = {\n    ApiUser,\n    ApiKey,\n    UserName: ApiUser,\n    ClientIp,\n    Command,\n  }\n  let res\n  const headers = {\n    'User-Agent': UA,\n  }\n  if (method == 'GET') {\n    const qs = stringify({ ...authData, ...data })\n    const url = `${host}/xml.response?${qs}`\n    res = await aqt(url, {\n      headers,\n    })\n  } else if (method == 'POST') {\n    const qs = stringify(authData)\n    res = await aqt(`${host}/xml.response?${qs}`, {\n      data,\n      headers,\n      type: 'form',\n    })\n  } else {\n    throw new Error('Unknown method.')\n  }\n  res = res.body\n\n  const xml = isXml(res)\n  if (!xml) throw new Error('non-xml response')\n\n  const error = getError(res)\n  if (error) throw error\n\n  const [{ content: CommandResponse }] = extractTags('CommandResponse', res)\n\n  return CommandResponse.trim()\n}\n\nexport const getError = (res) => {\n  const [{ content: Errors }] = extractTags('Errors', res)\n  if (Errors.length) {\n    const errors = extractTags('Error', Errors)\n\n    let c\n    let p\n    if (errors.length == 1) {\n      const [{ content, props }] = errors\n      c = content\n      p = props\n    } else {\n      c = errors.map(({ content }) => content).join('; ')\n      p = errors.map(({ props }) => props)\n    }\n    const er = new Error(c)\n    er.props = p\n\n    return er\n  }\n}","import extractTag from 'rexml'\n\nconst GET_LIST = 'namecheap.domains.getList'\n\nconst m = {\n  name: 'name',\n  expire: 'expiredate',\n  create: 'createdate',\n}\n\n/**\n * @param {string} sort\n */\nconst getSort = (sort, desc) => {\n  if (!['name', 'expire', 'create'].includes(sort.toLowerCase())) {\n    throw new Error(`Unknown sort by option: ${sort}.`)\n  }\n  const s = m[sort].toUpperCase()\n  if (desc) return `${s}_DESC`\n  return s\n}\n\n/**\n * Returns a list of domains for the particular user.\n * @param {!Function} query\n * @param {!_namecheap.GetList} options Options to get a list of domains. https://www.namecheap.com/support/api/methods/domains/get-list.aspx\n * @example\n *\n  // Get information about domains in the `.app` zone sorted by descending  create date (oldest first)\n  await nc.domains.getList({\n   sort: 'create',\n   desc: true,\n   filter: '.app',\n  })\n\n  // Result:\n  {\n   domains: [\n     {\n       ID: 30071047,\n       Name: 'example.app',\n       User: 'artdeco',\n       Created: '06/05/2018',\n       Expires: '06/05/2019',\n       IsExpired: false,\n       IsLocked: false,\n       AutoRenew: true,\n       WhoisGuard: 'ENABLED',\n       IsPremium: false,\n       IsOurDNS: false\n     },\n     {\n       ID: 30072635,\n       Name: 'test.app',\n       User: 'artdeco',\n       Created: '06/06/2018',\n       Expires: '06/06/2019',\n       IsExpired: false,\n       IsLocked: false,\n       AutoRenew: true,\n       WhoisGuard: 'ENABLED',\n       IsPremium: false,\n       IsOurDNS: false\n     },\n   ],\n   TotalItems: 2,\n   CurrentPage: 1,\n   PageSize: 20,\n  }\n */\nasync function getList(query, options = {}) {\n  const {\n    page,\n    sort,\n    desc,\n    filter,\n    type,\n    pageSize,\n  } = options\n  const reqOpts = {\n    'Page': page,\n    'PageSize': pageSize,\n    'SortBy': sort ? getSort(sort, desc) : getSort('create', 'desc'),\n    'SearchTerm': filter,\n    'ListType': type,\n  }\n  const res = await query(GET_LIST, reqOpts)\n  const domain = extractTag('Domain', res)\n  const domains = domain.map(({ props }) => {\n    /** @type {!_namecheap.Domain} */\n    const d = props\n    return d\n  })\n  const [{ content: Paging }] = extractTag('Paging', res)\n  const [{ content: TotalItems }] = extractTag('TotalItems', Paging)\n  const [{ content: CurrentPage }] = extractTag('CurrentPage', Paging)\n  const [{ content: PageSize }] = extractTag('PageSize', Paging)\n\n  return {\n    domains: domains,\n    TotalItems: parseInt(TotalItems, 10),\n    CurrentPage: parseInt(CurrentPage, 10),\n    PageSize: parseInt(PageSize, 10),\n  }\n}\n\nexport default getList\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/domains').Domain} _namecheap.Domain\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/domains').GetList} _namecheap.GetList\n */","import extractTags from 'rexml'\n\nconst COMMAND = 'namecheap.domains.getinfo'\n\nconst parseWhois = (Whoisguard) => {\n  let ID\n  let ExpiredDate\n  let EmailDetails\n  ([{ content: ID }] = extractTags('ID', Whoisguard))\n  try {\n    ([{ props: EmailDetails }] = extractTags('EmailDetails', Whoisguard))\n  } catch (err) {\n    // ok\n  }\n  try {\n    ([{ content: ExpiredDate }] = extractTags('ExpiredDate', Whoisguard))\n  } catch (err) {\n    // ok\n  }\n  return {\n    ID: parseInt(ID, 10),\n    ...(ExpiredDate ? { ExpiredDate } : {}),\n    ...(EmailDetails ? { EmailDetails } : {}),\n  }\n}\n\nconst parsePremiumDNS = (dns) => {\n  const [{ content: UseAutoRenew }] = extractTags('UseAutoRenew', dns)\n  const [{ content: SubscriptionId }] = extractTags('SubscriptionId', dns)\n  const [{ content: CreatedDate }] = extractTags('CreatedDate', dns)\n  const [{ content: ExpirationDate }] = extractTags('ExpirationDate', dns)\n  const [{ content: IsActive }] = extractTags('IsActive', dns)\n  return {\n    UseAutoRenew: UseAutoRenew == 'true',\n    SubscriptionId: parseInt(SubscriptionId, 10),\n    CreatedDate: new Date(Date.parse(CreatedDate)),\n    ExpirationDate: new Date(Date.parse(ExpirationDate)),\n    IsActive: IsActive == true,\n  }\n}\n\nexport const parse = (res) => {\n  const [{\n    content: DomainGetInfoResult,\n    props,\n  }] = extractTags('DomainGetInfoResult', res)\n  const [{\n    content: DomainDetails,\n  }] = extractTags('DomainDetails', DomainGetInfoResult)\n  const [{ content: CreatedDate }] = extractTags('CreatedDate', DomainDetails)\n  const [{ content: ExpiredDate }] = extractTags('ExpiredDate', DomainDetails)\n  const [{ content: NumYears }] = extractTags('NumYears', DomainDetails)\n  const [{\n    content: Whoisguard,\n    props: WhoisProps,\n  }] = extractTags('Whoisguard', DomainGetInfoResult)\n  const whois = parseWhois(Whoisguard)\n\n  const [{\n    content: PremiumDnsSubscription,\n  }] = extractTags('PremiumDnsSubscription', DomainGetInfoResult)\n  const premiumDns = parsePremiumDNS(PremiumDnsSubscription)\n\n  const [{\n    content: DnsDetails,\n    props: DnsProps,\n  }] = extractTags('DnsDetails', DomainGetInfoResult)\n  const Nameserver = extractTags('Nameserver', DnsDetails)\n    .map(({ content }) => content)\n\n  const [{\n    content: Modificationrights,\n    props: ModificationrightsProps,\n  }] = extractTags('Modificationrights', DomainGetInfoResult)\n  let rights = {}\n  if (Modificationrights) {\n    rights = extractTags('Rights', Modificationrights)\n      .reduce((acc, { props: p }) => {\n        const { Type } = p\n        return {\n          ...acc,\n          [Type]: true,\n        }\n      }, {})\n  }\n\n  const d = {\n    ...props,\n    DomainDetails: {\n      CreatedDate,\n      ExpiredDate,\n      NumYears: parseInt(NumYears, 10),\n    },\n    Whoisguard: {\n      ...WhoisProps,\n      ...whois,\n    },\n    PremiumDnsSubscription: premiumDns,\n    DnsDetails: {\n      ...DnsProps,\n      Nameserver,\n    },\n    Modificationrights: {\n      ...ModificationrightsProps,\n      ...rights,\n    },\n  }\n  return d\n}\n\n/**\n * Returns information about the requested domain.\n * @param {!Function} query\n * @param {string|_namecheap.GetInfo} options The domain name, or options to get info about a domain.\n * @example\n *\n * // Obtain information for the testt.cc domain:\n * await nc.domains.getInfo({ domain: 'testt.cc' })\n * await nc.domains.getInfo('testt.cc')\n *\n * // Result:\n * { Status: 'Ok',\n *  ID: 30072635,\n *  DomainName: 'testt.cc',\n *  OwnerName: 'artdeco',\n *  IsOwner: true,\n *  IsPremium: false,\n *  DomainDetails:\n *   { CreatedDate: '06/06/2018',\n *     ExpiredDate: '06/06/2019',\n *     NumYears: 0 },\n *  Whoisguard:\n *   { Enabled: 'True',\n *     ID: 23996873,\n *     ExpiredDate: '06/05/2019',\n *     EmailDetails:\n *      { WhoisGuardEmail: 'ff474db8ad3b4c3b95a2b0f3b3a73acc.protect[at]whoisguard.com',\n *        ForwardedTo: 'example[at]adc.sh',\n *        LastAutoEmailChangeDate: '',\n *        AutoEmailChangeFrequencyDays: 0 } },\n *  PremiumDnsSubscription:\n *   { UseAutoRenew: false,\n *     SubscriptionId: -1,\n *     CreatedDate: 0001-01-01T00:00:00.000Z,\n *     ExpirationDate: 0001-01-01T00:00:00.000Z,\n *     IsActive: false },\n *  DnsDetails:\n *   { ProviderType: 'CUSTOM',\n *     IsUsingOurDNS: false,\n *     HostCount: 2,\n *     EmailType: 'FWD',\n *     DynamicDNSStatus: false,\n *     IsFailover: false,\n *     Nameserver:\n *      [ 'ns-1013.awsdns-62.net',\n *        'ns-1311.awsdns-35.org',\n *        'ns-1616.awsdns-10.co.uk',\n *        'ns-355.awsdns-44.com' ] },\n *  Modificationrights: { All: true } }\n */\nasync function getInfo(query, options) {\n  const opts = typeof options == 'string' ? { domain: options } : options\n  const {\n    domain,\n    host,\n  } = opts\n  const res = await query(COMMAND, {\n    'DomainName': domain,\n    'HostName': host,\n  })\n\n  /** @type {!_namecheap.DomainInfo} */\n  const d = parse(res)\n  return d\n}\n\nexport default getInfo\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/domains').DomainInfo} _namecheap.DomainInfo\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/domains').GetInfo} _namecheap.GetInfo\n */","import { validateDomains } from '../../lib'\nimport extractTags from 'rexml'\n\nconst COMMAND = 'namecheap.domains.check'\n\n/**\n * Check if the domain name is taken.\n * @param {!Function} query\n * @param {string|_namecheap.Check} options\n * @example\n *\n * await nc.domains.check('test.co')\n *\n * [ { Domain: 'test.co',\n    Available: false,\n    ErrorNo: 0,\n    Description: '',\n    IsPremiumName: false,\n    PremiumRegistrationPrice: 0,\n    PremiumRenewalPrice: 0,\n    PremiumRestorePrice: 0,\n    PremiumTransferPrice: 0,\n    IcannFee: 0,\n    EapFee: '0.0' } ]\n *\n */\nasync function check(query, options) {\n  const isSingle = typeof options == 'string'\n  const opts = isSingle ? { domain: options } : options\n  const {\n    domains = [],\n    domain,\n  } = opts\n  if (!Array.isArray(domains)) throw new Error('Domains must be a list.')\n  const val = validateDomains(domains)\n  if (!val) throw new Error('All domains must be strings.')\n  if (domain && typeof domain != 'string')\n    throw new Error('Domain must be a string.')\n  const d = [...domains, ...(domain ? [domain] : [])]\n\n  const res = await query(COMMAND, { 'DomainList': d.join(',') })\n  const DomainCheckResult = extractTags('DomainCheckResult', res)\n\n  /** @type {!Array<!_namecheap.DomainCheck>} */\n  const results = DomainCheckResult.map(({ props }) => props)\n  return results\n}\n\nexport default check\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/domains').DomainCheck} _namecheap.DomainCheck\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/domains').Check} _namecheap.Check\n */","import extractTags from 'rexml'\n\nconst COMMAND = 'namecheap.domains.create'\n\n/**\n * Register a domain.\n * @param {!Function} query\n * @param {_namecheap.Create} options\n * @example\n *\n * // 0. Find the default account address.\n * const ad = await nc.address.getList()\n * const { AddressId } = ad.find(({ IsDefault }) => IsDefault)\n * const address = await nc.address.getInfo(AddressId)\n *\n * // Register a domain.\n * await nc.domains.create({\n *  domain: 'example-test-100.com',\n *  address,\n * })\n * // Result:\n * { Domain: 'example-test-100.com',\n *  Registered: true,\n *  ChargedAmount: '9.0600',\n *  DomainID: 330037,\n *  OrderID: 1291740,\n *  TransactionID: 1828960,\n *  WhoisguardEnable: true,\n *  FreePositiveSSL: false,\n *  NonRealTimeDomain: false }\n */\nasync function create(query, options) {\n  const {\n    domain,\n    years = 1,\n    promo,\n    address,\n    registrantAddress = address,\n    techAddress = address,\n    adminAddress = address,\n    billingAddress = address,\n    nameservers = [],\n    whois = true,\n    premium = {},\n  } = options\n  const RegistrantAddress = getAddressObject(registrantAddress, 'Registrant')\n  const TechAddress = getAddressObject(techAddress, 'Tech')\n  const AdminAddress = getAddressObject(adminAddress, 'Admin')\n  const AuxAddress = getAddressObject(billingAddress, 'AuxBilling')\n\n  const res = await query(COMMAND, {\n    'DomainName': domain,\n    'Years': years,\n    'PromotionCode': promo,\n    ...RegistrantAddress,\n    ...TechAddress,\n    ...AdminAddress,\n    ...AuxAddress,\n    'Nameservers': nameservers.join(','),\n    'AddFreeWhoisguard': whois ? 'yes' : 'no',\n    'WGEnabled': whois ? 'yes' : 'no',\n    ...premium,\n  }, 'POST')\n  const [{ props }] = extractTags('DomainCreateResult', res)\n  /** @type {!_namecheap.RegistrationResult} */\n  const r = props\n  return r\n}\n\nconst keys = ['JobTitle', 'FirstName', 'LastName', 'Address1', 'Address2',\n  'City', 'StateProvince', 'StateProvinceChoice', 'Country',\n  'Phone', 'PhoneExt', 'Fax', 'EmailAddress']\n\nexport const getAddressObject = (address, key) => {\n  const res = keys\n    .reduce((acc, current) => {\n      const val = (current == 'StateProvince' && !address[current]) ? 'NA' : address[current]\n      return {\n        ...acc,\n        [`${key}${current}`]: val,\n      }\n    }, {\n      [`${key}OrganizationName`]: address.Organization,\n      [`${key}PostalCode`]: address.Zip,\n    })\n  return res\n}\n\nexport default create\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/domains').Create} _namecheap.Create\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/domains').RegistrationResult} _namecheap.RegistrationResult\n */","import extractTag from 'rexml'\n\nconst COMMAND = 'namecheap.domains.dns.getHosts'\n\nasync function getList(query, { sld, tld }) {\n  const reqOpts = {\n    'SLD': sld,\n    'TLD': tld,\n  }\n  const res = await query(COMMAND, reqOpts)\n  const [{ content, props }] = extractTag('DomainDNSGetHostsResult', res)\n  const hosts1 = getHosts(content, 'Host')\n  const hosts2 = getHosts(content, 'host')\n  const hosts3 = getHosts(content, 'HOST')\n  const hosts = [...hosts1, ...hosts2, ...hosts3]\n  const p = /** @type {{ IsUsingOurDNS: boolean, Domain: string, EmailType: string }} */ (props)\n  const r = {\n    ...p,\n    hosts,\n  }\n  return r\n}\n\n/**\n * @returns {!Array<!_namecheap.Host>}\n */\nconst getHosts = (content, tag) => {\n  return extractTag(tag, content).map(({ props }) => {\n    return props\n  })\n}\n\nexport default getList\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../../types/typedefs/dns').Host} _namecheap.Host\n */","import extractTag from 'rexml'\n\nconst COMMAND = 'namecheap.domains.dns.setHosts'\n\n/**\n * @param {?} query\n * @param {!Object} params\n * @param {!Array<!_namecheap.HostParams>} [hosts]\n */\nexport default async function setHosts(query, params, hosts) {\n  const reqOpts = hosts.reduce((acc, host, i) => {\n    Object.entries(host).forEach(([key, value]) => {\n      if (!['HostName', 'RecordType', 'Address', 'MXPref', 'TTL'].includes(key)) return\n      const k = `${key}${i+1}`\n      acc[k] = value\n    })\n    return acc\n  }, params)\n  const res = await query(COMMAND, reqOpts, 'POST')\n  const [{ props }] = extractTag('DomainDNSSetHostsResult', res)\n  /** @type {{ Domain: string, IsSuccess: boolean }} */\n  const p = props\n  return p\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../../types/typedefs/dns').Host} _namecheap.Host\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../../types/typedefs/dns').HostParams} _namecheap.HostParams\n */","import extractTags from 'rexml'\n\nconst COMMAND = 'namecheap.users.address.getList'\n\n/**\n * Gets a list of address IDs and address names associated with the user account.\n * @param {!Function} query\n * @example\n *\n * // Get the list of addresses added to the account.\n * await nc.address.getList()\n * // Result:\n * [\n *  {\n *    AddressId: 0,\n *    AddressName: 'Primary Address',\n *    IsDefault: true,\n *  }\n * ]\n */\nasync function getList(query) {\n  const res = await query(COMMAND)\n  const [{\n    content: AddressGetListResult,\n  }] = extractTags('AddressGetListResult', res)\n  const List = extractTags('List', AddressGetListResult)\n  const addresses = List.map(({ props }) => {\n    /** @type {_namecheap.Address} */\n    const a = props\n    return a\n  })\n  return addresses\n}\n\nexport default getList\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/address').Address} _namecheap.Address\n */","import { debuglog } from 'util'\nimport extractTags from 'rexml'\n\nconst LOG = debuglog('expensive')\n\nconst COMMAND = 'namecheap.users.address.getInfo'\n\n/**\n * Gets information for the requested address ID.\n * @param {!Function} query\n * @param {string|number} id The address id to get info about.\n * @example\n *\n * // Find the address info.\n * await nc.address.getInfo(0)\n *\n * // Result:\n * { AddressId: 0,\n *  UserName: 'example',\n *  AddressName: 'Main Address',\n *  Default_YN: true,\n *  FirstName: 'Art',\n *  LastName: 'Deco',\n *  JobTitle: 'Developer',\n *  Organization: 'Example Co Limited',\n *  Address1: 'Planetary Express',\n *  Address2: '57th Street',\n *  City: 'New New York',\n *  StateProvince: 'NA',\n *  StateProvinceChoice: 'P',\n *  Zip: '10019',\n *  Country: 'US',\n *  Phone: '+1.5417543010',\n *  PhoneExt: '',\n *  EmailAddress: 'artdeco[at]adc.sh' }\n */\nasync function getInfo(query, id) {\n  const res = await query(COMMAND, {\n    'AddressId': id,\n  })\n  const [{\n    content: GetAddressInfoResult,\n  }] = extractTags('GetAddressInfoResult', res)\n  const address = parse(GetAddressInfoResult)\n  return address\n}\n\nconst keys = [\n  'AddressId', 'UserName', 'AddressName', 'Default_YN',\n  'FirstName', 'LastName', 'JobTitle', 'Organization', 'Address1', 'Address2',\n  'City', 'StateProvince', 'StateProvinceChoice', 'Zip', 'Country', 'Phone',\n  'PhoneExt', 'EmailAddress',\n]\n\nconst parse = (add) => {\n  /** @type {!_namecheap.AddressDetail} */\n  const res = keys\n    .reduce((acc, key) => {\n      try {\n        let [{ content }] = extractTags(key, add)\n        if (key == 'Default_YN') {\n          content = content == 'true'\n        } else if (key == 'AddressId') {\n          content = parseInt(content, 10)\n        }\n        return {\n          ...acc,\n          [key]: content,\n        }\n      } catch (er) {\n        LOG(`Could not extract tag ${key}`)\n        return acc\n      }\n    }, {})\n  return res\n}\n\nexport default getInfo\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/address').AddressDetail} _namecheap.AddressDetail\n */","import extractTags from 'rexml'\n\nconst COMMAND = 'namecheap.users.getPricing'\n\n/**\n * @param {?} query\n * @param {_namecheap.GetPricing} options\n */\nconst getPricing = async (query, options) => {\n  const { type, category, promoCode, action, product } = options\n  const res = await query(COMMAND, {\n    'ProductType': type,\n    'ProductCategory': category,\n    'PromotionCode': promoCode,\n    'ActionName': action,\n    'ProductName': product,\n  })\n  const productType = /** @type {!_namecheap.Pricing} */ (extractTags('ProductType', res)\n    .reduce((acc, { content, props: { 'Name': name } }) => {\n      const cat = getCategory(content)\n      acc[name] = cat\n      return acc\n    }, {}))\n  return productType\n}\n\nconst getCategory = (typeContent) => {\n  const category = extractTags('ProductCategory', typeContent)\n    .reduce((acc, { content, props: { 'Name': name } }) => {\n      const product = getProduct(content)\n      acc[name] = product\n      return acc\n    }, {})\n  return category\n}\n\nconst getProduct = (categoryContent) => {\n  const product = extractTags('Product', categoryContent).reduce((acc, {\n    content,\n    props: { 'Name': name },\n  }) => {\n    const price = extractTags('Price', content)\n    const prices = price.map(({ props: p }) => p)\n    const n = name.replace(/-(.)/g, (_, l) => l.toUpperCase())\n    acc[n] = prices\n    return acc\n  }, {})\n  return product\n}\n\nexport default getPricing\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/users').Pricing} _namecheap.Pricing\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../../types/typedefs/users').GetPricing} _namecheap.GetPricing\n */\n","import query from './lib/query'\n\nimport getList from './api/domains/get-list'\nimport getInfo from './api/domains/get-info'\nimport check from './api/domains/check'\nimport create from './api/domains/create'\n\nimport getHosts from './api/domains/dns/get-hosts'\nimport setHosts from './api/domains/dns/set-hosts'\n\nimport getAddressList from './api/address/get-list'\nimport getAddressInfo from './api/address/get-info'\n\nimport getPricing from './api/users/get-pricing'\n\n/**\n * @implements {_namecheap.NameCheap}\n */\nexport default class NameCheap {\n  /**\n   * Create a new instance of the client.\n   * @param {!_namecheap.Options} options Options for the NameCheap client.\n   * @param {string} options.user The username required to access the API.\n   * @param {string} options.key The password required used to access the API.\n   * @param {string} options.ip The IP address of the client accessing the application (End-user IP address).\n   * @param {boolean} [options.sandbox=false] Whether to use the sandbox version of the API. Default `false`.\n   */\n  constructor(options) {\n    const {\n      user,\n      key,\n      sandbox = false,\n      ip,\n    } = options\n    this._user = user\n    this._key = key\n    this._host = `https://api.${sandbox ? 'sandbox.' : ''}namecheap.com`\n    this._ip = ip\n    const q = this._query.bind(this)\n\n    this.users = {\n      /**\n       * Returns pricing information for a requested product type.\n       * @param {!_namecheap.GetPricing} opts\n       */\n      async getPricing(opts) {\n        const res = await getPricing(q, opts)\n        return res\n      },\n    }\n\n    this.domains = {\n      /**\n       * Returns a list of domains for the particular user.\n       * @param {!_namecheap.GetList} opts Options to get a list of domains. https://www.namecheap.com/support/api/methods/domains/get-list.aspx\n       */\n      async getList(opts = {}) {\n        const res = await getList(q, opts)\n        return res\n      },\n      /**\n       * Returns information about the requested domain.\n       * @param {string|!_namecheap.GetInfo} opts Options to get info about a domain. https://www.namecheap.com/support/api/methods/domains/get-info.aspx\n       */\n      async getInfo(opts) {\n        const res = await getInfo(q, opts)\n        return res\n      },\n      /**\n       * Check if the domain name is taken.\n       * @param {string|!_namecheap.Check} opts Options to check a domain or domains. https://www.namecheap.com/support/api/methods/domains/check.aspx\n       */\n      async check(opts) {\n        const res = await check(q, opts)\n        return res\n      },\n      /**\n       * Register a domain.\n       * @param {!_namecheap.Create} opts Options to register a domain. https://www.namecheap.com/support/api/methods/domains/create.aspx\n       */\n      async create(opts) {\n        const res = await create(q, opts)\n        return res\n      },\n    }\n\n    this.address = {\n      /**\n       * Gets a list of address IDs and address names associated with the user account.\n       */\n      async getList() {\n        const res = await getAddressList(q)\n        return res\n      },\n      /**\n       * Gets information for the requested address ID.\n       * @param {string|number} id The address id to get info about.\n       */\n      async getInfo(id) {\n        const res = await getAddressInfo(q, id)\n        return res\n      },\n    }\n\n    this.dns = {\n      /**\n       * Retrieves DNS host record settings for the requested domain.\n       * @param {string} domain\n       */\n      async getHosts(domain) {\n        const [sld, ...rest] = domain.split('.')\n        const tld = rest.join('.')\n        const res = await getHosts(q, { sld, tld })\n        return res\n      },\n      /**\n       * Sets the host records.\n       * @param {string} domain The domain name for which to set records.\n       * @param {!Array<!_namecheap.HostParams>} hosts An array with hosts to set.\n       * @param {!_namecheap.DNSSetOptions} [params] Optional parameters.\n       */\n      async setHosts(domain, hosts, params = {}) {\n        const [sld, ...rest] = domain.split('.')\n        const tld = rest.join('.')\n        const res = await setHosts(q, { 'SLD': sld, 'TLD': tld, ...params }, hosts)\n        return res\n      },\n    }\n  }\n  /**\n   * @param {string} endpoint Which method should be queried, e.g., `namecheap.domains.getList`.\n   * @param {!Object<string, string>} [params] The map of parameters.\n   * @param {string} [method] Such as POST or GET.\n   */\n  async _query(endpoint, params, method) {\n    // const cb = erotic(true)\n    try {\n      const res = await query({\n        'ApiKey': this._key,\n        'ApiUser': this._user,\n        'host': this._host,\n        'ClientIp': this._ip,\n      }, endpoint, params, method)\n      return res\n    } catch (err) {\n      // const e = cb(err)\n      throw err\n    }\n  }\n}\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_namecheap.Options} Options Options for the NameCheap client.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _namecheap.Options Options for the NameCheap client.\n * @prop {string} user The username required to access the API.\n * @prop {string} key The password required used to access the API.\n * @prop {string} ip The IP address of the client accessing the application (End-user IP address).\n * @prop {boolean} [sandbox=false] Whether to use the sandbox version of the API. Default `false`.\n */\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/users').GetPricing} _namecheap.GetPricing\n */\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/domains').GetList} _namecheap.GetList\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/domains').GetInfo} _namecheap.GetInfo\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/domains').Domain} _namecheap.Domain\n */\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/domains').DomainInfo} _namecheap.DomainInfo\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_namecheap.DomainCheck} DomainCheck\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/domains').DomainCheck} _namecheap.DomainCheck\n */\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_namecheap.Check} Check\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/domains').Check} _namecheap.Check\n */\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/domains').Create} _namecheap.Create\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/domains').RegistrationResult} _namecheap.RegistrationResult\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/dns').HostParams} _namecheap.HostParams\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types/typedefs/dns').DNSSetOptions} _namecheap.DNSSetOptions\n */","import '../types/externs'\nimport '../types/externs/users'\nimport '../types/externs/domains'\nimport '../types/externs/address'\nimport '../types/externs/dns'\n\nimport Namecheap from './'\n\nmodule.exports = Namecheap"],
"names":["request","https","http","debuglog","util","getStackSegment","stack","from","oneLine","splitStack","split","undefined","item","length","slice","items","join","getEntryStack","transparent","stackSegment","getCallerFromArguments","args","caller","homedir","os","extractPathRegex","pathRegex","homeDir","cleanStack","pretty","ignoredModules","re","RegExp","source","replace","j","filter","x","pathMatches","match","includes","test","trim","map","m","p1","makeCallback","entryCaller","entryStack","shadow","cb","messageOrError","arguments","errorStack","Error","calleeStackLine","message","isError","stackMessage","stackHeading","Object","assign","e","properties","erotic","parse","url","Writable","stream","pipeError","streamA","streamB","once","emit","Catchment","options","binary","rs","er","proxyError","wrap","_","opts","_caughtData","_promise","Promise","r","on","d","Buffer","concat","indexOf","pipe","chunk","encoding","callback","push","collect","readable","promise","res","createGunzip","zlib","isMessageGzip","contentEncoding","headers","makeRequest","requestOptions","config","justHeaders","req","body","rawLength","byteLength","then","statusMessage","statusCode","destroy","isGzip","data","error","err","abort","parsedBody","getFormData","form","keys","reduce","urlEncodedDataPairs","acc","key","v","p","encodeURIComponent","exec","end","contentType","startsWith","JSON","response","ua","version","name","require","LOG","aqt","address","type","outgoingHeaders","compress","method","timeout","hostname","protocol","port","path","stringify","_d","querystring","mismatch","string","o","capturedGroup","i","start","attributeRe","nameRe","valRe","attributesRe","extractTags","tag","matches","simple","end1","end2","attributes","content","attrs","props","extractProps","simpleAttribute","val","parseInt","filterEmpty","obj","k","validateDomains","arr","current","query","Command","Options","ApiUser","ApiKey","ClientIp","host","authData","UserName","UA","qs","xml","getError","CommandResponse","Errors","errors","c","expire","create","getSort","sort","desc","toLowerCase","s","toUpperCase","getList","page","pageSize","reqOpts","GET_LIST","domains","domain","Paging","TotalItems","CurrentPage","PageSize","parseWhois","Whoisguard","ID","ExpiredDate","EmailDetails","parsePremiumDNS","dns","UseAutoRenew","SubscriptionId","CreatedDate","ExpirationDate","IsActive","Date","DomainGetInfoResult","DomainDetails","NumYears","WhoisProps","whois","PremiumDnsSubscription","premiumDns","DnsDetails","DnsProps","Nameserver","Modificationrights","ModificationrightsProps","rights","Type","getInfo","COMMAND","check","Array","isArray","DomainCheckResult","results","years","promo","registrantAddress","techAddress","adminAddress","billingAddress","nameservers","premium","RegistrantAddress","getAddressObject","TechAddress","AdminAddress","AuxAddress","Organization","Zip","sld","tld","hosts1","getHosts","hosts2","hosts3","hosts","setHosts","params","entries","forEach","value","AddressGetListResult","List","addresses","id","GetAddressInfoResult","add","getPricing","category","promoCode","action","product","productType","cat","getCategory","typeContent","getProduct","categoryContent","prices","price","n","l","NameCheap","user","sandbox","ip","_user","_key","_host","_ip","q","_query","bind","users","rest","endpoint","module","exports","Namecheap"]
}
